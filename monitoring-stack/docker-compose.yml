version: '3.8'

services:
  # Приложение
  orders-api:
    build: ../orders-api
    container_name: orders-api
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
      - prometheus-data:/prometheus
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitoring
    restart: unless-stopped

# Симулятор пользовательских запросовload-generator:
  load-generator:
    image: curlimages/curl:latest
    container_name: load-generator
    depends_on:
      - orders-api
    command: >
      sh -c '
        echo "Waiting for orders-api...";
        until curl -sf http://orders-api:8080/health > /dev/null 2>&1; do
          sleep 2;
        done;
        echo "✅ Load generation started";
        
        while true; do
          DELAY=$$(awk -v min=0.5 -v max=3 "BEGIN{srand(); print min+rand()*(max-min)}");
          ENDPOINT=$$(shuf -i 1-10 -n 1);
          
          case $$ENDPOINT in
            1|2|3)
              LIMIT=$$(shuf -i 5-50 -n 1);
              echo "[$$DELAY s] GET /orders?limit=$$LIMIT";
              curl -sf "http://orders-api:8080/orders?limit=$$LIMIT" > /dev/null || true;
              ;;
            4|5)
              QUERY=$$(shuf -i 1-1000 -n 1);
              echo "[$$DELAY s] GET /search?q=order$$QUERY";
              curl -sf "http://orders-api:8080/search?q=order$$QUERY" > /dev/null || true;
              ;;
            6|7)
              CUST_ID=$$(shuf -i 1-100 -n 1);
              AMOUNT=$$(shuf -i 10-500 -n 1);
              echo "[$$DELAY s] POST /orders (customer=CUST-$$CUST_ID, amount=$$AMOUNT)";
              curl -sf -X POST http://orders-api:8080/orders \
                -H "Content-Type: application/json" \
                -d "{\"customer_id\":\"CUST-$$CUST_ID\",\"amount\":$$AMOUNT,\"items\":[]}" > /dev/null || true;
              ;;
            8)
              ORDER_ID=$$(shuf -i 1-100 -n 1);
              echo "[$$DELAY s] GET /orders/ORD-$$ORDER_ID";
              curl -sf "http://orders-api:8080/orders/ORD-$$ORDER_ID" > /dev/null || true;
              ;;
            9)
              ORDER_ID=$$(shuf -i 1-100 -n 1);
              STATUS=$$(shuf -n1 -e pending processing completed cancelled);
              echo "[$$DELAY s] PUT /orders/ORD-$$ORDER_ID/status ($$STATUS)";
              curl -sf -X PUT "http://orders-api:8080/orders/ORD-$$ORDER_ID/status" \
                -H "Content-Type: application/json" \
                -d "{\"status\":\"$$STATUS\"}" > /dev/null || true;
              ;;
            10)
              echo "[$$DELAY s] GET /health";
              curl -sf http://orders-api:8080/health > /dev/null || true;
              ;;
          esac;
          
          sleep $$DELAY;
        done
      '
    networks:
      - monitoring
    restart: unless-stopped


networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  alertmanager-data: